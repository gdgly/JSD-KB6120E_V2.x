#include "string.h"
#include "SDCard_Port.h"
#include "BSP.H"
#define SD_Card       	0x03
extern void	delay_us ( uint32_t us );
extern UINT8			buf[100];	
extern UINT8			bufread[100];
extern UINT8			TarName[100];
extern uint8_t 		i,s;
uint16_t xy;
uint8_t sdinit[16]={"SDINITSUCCESSFUL"};
 
//创建根目录下的目录并打开
void SD_CREAT_CON_DIR(const char * BUF_Name)
{
	
	strcpy( (char *)TarName,  BUF_Name );
	s=CH376DirCreate( TarName ); /* 在根目录下新建目录(文件夹)并打开,如果目录已经存在那么直接打开 */
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
}
/***/

//创建根目录下的文件 并对其写
void SD_CREAT_WRITE_DIR(const char * BUF_Name, uint8_t * Content, uint32_t offset )
{
	
	strcpy( (char *)TarName,  BUF_Name );/* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
	CH376FileCreate( TarName );

	CH376ByteWrite( Content, offset, NULL );  /* 以字节为单位向当前位置写入数据块 */
	
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
}
/***/

//打开根目录下的文件并对其读
void  SD_OPEN_READ_DIR (const char * BUF_Name , uint32_t Addr, uint8_t * bufread , uint32_t offset  )
{
	
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpen( TarName );  /* 在根目录或者当前目录下打开文件或者目录(文件夹) */
	CH376ByteLocate( Addr );
//	bufoffset =	CH376GetFileSize( );
	CH376ByteRead( bufread, offset , NULL );/* 以字节为单位从当前位置读取数据块 */
//	strcpy( (char *)bufread , (char *) buf );
//	printf(" read=%s \n ",bufread );
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
}
/***/

//打开根目录下的文件并对其写
void  SD_OPEN_WRITE_DIR (const char * BUF_Name, uint8_t * Content , uint32_t Addr, uint32_t offset  )
{
	
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpen( TarName );  /* 在根目录或者当前目录下打开文件或者目录(文件夹) */
//	bufoffset =	CH376GetFileSize( );
	CH376ByteLocate( Addr );
	
	//strcpy((char *)buf,   Content );
	CH376ByteWrite( Content , offset, NULL );  /* 以字节为单位向当前位置写入数据块 */

	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
}
/**/

//创建多级目录下的文件 并对其写
void SD_CREAT_WRITE_PATH(const char * BUF_Name, uint8_t * Content , uint32_t offset )
{	//													文件名                文件内容
	
	strcpy( (char *)TarName,  BUF_Name ); /* 目标文件名 */
	s = CH376FileCreatePath( TarName );  	/* 新建多级目录下的文件,支持多级目录路径,输入缓冲区必须在RAM中 */

//	strcpy((char *)buf,   Content );
	s = CH376ByteWrite( Content , offset, NULL ); /* 以字节为单位向当前位置写入数据块 */

	s = CH376FileClose( TRUE );   /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
	 
	
}
/**/

//打开多级目录下的文件并对其读
uint8_t  SD_OPEN_READ_PATH (const char * BUF_Name , uint32_t Addr , uint8_t * bufread , uint32_t offset )
{
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpenPath( TarName );/* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
	//bufoffset =	CH376GetFileSize( );
	CH376ByteLocate( Addr );
	s = CH376ByteRead(  bufread , offset ,NULL );/* 以字节为单位从当前位置读取数据块 */
//	strcpy( (char *)bufread , (char *) buf );
//	printf(" read=%s \n ",bufread  );
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
	return s;
}
/**/

//打开多级目录下的文件并对其写
uint8_t SD_OPEN_WRITE_PATH (const char * BUF_Name, uint8_t * Content , uint32_t Addr ,uint32_t offset)
{
	
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpenPath( TarName );/* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
//	bufoffset =	CH376GetFileSize( );
	CH376ByteLocate( Addr );
	//strcpy( (char *)buf,   (char *)Content );
	s = CH376ByteWrite(Content, offset, &xy ); /* 以字节为单位向当前位置写入数据块 */
	
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
	return s;
}
/**/
BOOL SDLoad( const char * B_Name , uint32_t Addr, uint8_t * bufread, uint32_t offset  )
{											//文件名称       读起始地址    要读的数据长度
	
	
	if( SD_OPEN_READ_PATH ( B_Name  , Addr  ,bufread , offset ) == USB_INT_SUCCESS )
		return TRUE;
	else
		return FALSE;
	
}
BOOL SDSave( const char * BUF_Name ,  uint8_t * Content , uint32_t Addr, uint32_t offset  )
{										//		文件名称 				要写的内容 		写起始地址		
	
	

	if( SD_OPEN_WRITE_PATH ( BUF_Name , Content , Addr, offset ) == USB_INT_SUCCESS )
		return TRUE;
	else if(s == USB_INT_BUF_OVER)
	{beep();return FALSE;}
	else
		return FALSE;
}
BOOL SDFill( const char * BUF_Name , uint32_t Addr , uint8_t size)
{										//		文件名称 			写起始地址					要写的数量
	
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpenPath( TarName );/* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
	CH376ByteLocate( Addr );
	
	memset( buf, 0xaa, 100 );
	s = CH376ByteWrite( buf, size, NULL ); /* 以字节为单位向当前位置写入数据块 */
	CH376FileClose( TRUE ); /* 关闭文件,对于字节读写建议自动更新文件长度 */
	memset( TarName, 0, 100 );
	memset( buf, 0, 100 );
	if( s == USB_INT_SUCCESS )
		return TRUE;
	else if(s == USB_INT_BUF_OVER)
	{beep();return FALSE;}
	else
		return FALSE;
}
uint32_t SDGetSize(const char * BUF_Name)
{
	uint32_t bufoffset;
	strcpy( (char *)TarName,  BUF_Name );
	CH376FileOpenPath( TarName );/* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
	bufoffset =	CH376GetFileSize( );
	return bufoffset;
}
/***/
#define	FilePageSize_TSP  40u
#define	FilePageSize_AIR  24u
#define	FilePageSize_R24  64u
#define	FilePageSize_SHI  64u
void SD_Init(void)
{

	
	delay_us( 5000 );
	s = mInitCH376Host(SD_Card);       /* 初始化CH376--SD卡模式*/
	
	for ( i = 0; i < 50; i ++ ) 
	{   
		delay_us( 10000 );              
		s = CH376DiskMount( );  //初始化磁盘并测试磁盘是否就绪.   
		if ( s == USB_INT_SUCCESS ) /* 准备好 */
		{
				break;  
		} 
		else if ( s == ERR_DISK_DISCON )/* 检测到断开,重新检测并计时 */    
		{
			break; 
		}  
		if ( CH376GetDiskStatus( ) >= DEF_DISK_MOUNTED && i >= 5 ) /* 有的U盘总是返回未准备好,不过可以忽略,只要其建立连接MOUNTED且尝试5*50mS */
		{
			break; 
		}                                   				
	}
// 	i = CH376ReadBlock( buf );  /* 如果需要,可以读取数据块CH376_CMD_DATA.DiskMountInq,返回长度 */
// 	if ( i == sizeof( INQUIRY_DATA ) )  /* U盘的厂商和产品信息 */
// 	{  
// 		buf[ i ] = 0;
// 	}
// 	s = CH376DiskCapacity( (PUINT32) buf  ); 

// 	s = CH376DiskQuery ( (PUINT32) buf );	/* 查询磁盘剩余空间信息,扇区数 */	
	
// 	
//  	SD_CREAT_CON_DIR("\\SD_AIR");	//创建工作目录	( 如果已经存在，直接打开 )
// 	if( ! SDLoad( "\\SD_AIR\\AIR.TXT", 0, (uint8_t *) bufread, 15 ) )
// 	{
// 		SD_CREAT_WRITE_PATH( "\\SD_AIR\\AIR.TXT", sdinit,16 );// 不正常 重新创建
// 		SDFill( "\\SD_AIR\\AIR.TXT", 16, (FilePageSize_AIR -  sizeof ( sdinit )));
// 	}
// 	else 
// 	if( strncmp( (char*)sdinit, (char*)bufread, 15 ) ) //检测文件是否正常 返回零为正常
// 	{
// 		SD_CREAT_WRITE_PATH( "\\SD_AIR\\AIR.TXT", sdinit,16 );//非零 不正常 重新创建
// 		SDFill( "\\SD_AIR\\AIR.TXT", 16, ( FilePageSize_AIR - sizeof ( sdinit )));
// 	}

	
	SD_CREAT_CON_DIR("\\SD_TSP");
	if( ! SDLoad( "\\SD_TSP\\TSP.TXT", 0, (uint8_t *) bufread, 15 ) )
	{
		SD_CREAT_WRITE_PATH( "\\SD_TSP\\TSP.TXT", sdinit,16 );// 不正常 重新创建
		SDFill( "\\SD_TSP\\TSP.TXT",16, ( FilePageSize_TSP - sizeof ( sdinit )));
	}
	else 
	if( strncmp( (char*)sdinit, (char*)bufread, 15 ) ) //检测文件是否正常 返回零为正常
	{
		SD_CREAT_WRITE_PATH( "\\SD_TSP\\TSP.TXT", sdinit,16 );//非零 不正常 重新创建
		SDFill( "\\SD_TSP\\TSP.TXT", 16, (FilePageSize_TSP - sizeof ( sdinit )));
	}
	
	
	SD_CREAT_CON_DIR("\\SD_R24");
	if( ! SDLoad( "\\SD_R24\\R24.TXT", 0, (uint8_t *) bufread, 15 ) )
	{
		SD_CREAT_WRITE_PATH( "\\SD_R24\\R24.TXT", sdinit,16 );// 不正常 重新创建
		SDFill( "\\SD_R24\\R24.TXT", 16, (FilePageSize_R24 - sizeof ( sdinit )));
	}
	else 
	if( strncmp( (char*)sdinit, (char*)bufread, 15 ) ) //检测文件是否正常 返回零为正常
	{
		SD_CREAT_WRITE_PATH( "\\SD_R24\\R24.TXT", sdinit,16 );//非零 不正常 重新创建
		SDFill( "\\SD_R24\\R24.TXT", 16, (FilePageSize_R24 - sizeof ( sdinit )));
	}
	
	SD_CREAT_CON_DIR("\\SD_SHI");
	if( ! SDLoad( "\\SD_SHI\\SHI.TXT", 0, (uint8_t  *) bufread, 15 ) )
	{
		SD_CREAT_WRITE_PATH( "\\SD_SHI\\SHI.TXT", sdinit,16 );// 不正常 重新创建
		SDFill( "\\SD_SHI\\SHI.TXT", 16, (FilePageSize_SHI - sizeof ( sdinit )));
	}
	else 
	if( strncmp( (char*)sdinit, (char*)bufread, 15 ) ) //检测文件是否正常 返回零为正常
	{
		SD_CREAT_WRITE_PATH( "\\SD_SHI\\SHI.TXT", sdinit,16 );//非零 不正常 重新创建
		SDFill( "\\SD_SHI\\SHI.TXT", 16, (FilePageSize_SHI - sizeof ( sdinit )));
	}
	
	
	SD_CREAT_CON_DIR("\\SD_POW");	//创建工作目录	( 如果已经存在，直接打开 )
	if( ! SDLoad( "\\SD_POW\\POWER.TXT", 0, (uint8_t *) bufread, 15 ) )
	{
		SD_CREAT_WRITE_PATH( "\\SD_POW\\POWER.TXT", sdinit,16 );// 不正常 重新创建
		SDFill( "\\SD_POW\\POWER.TXT", 16, (100 + 4 -  sizeof ( sdinit )));
	}
	else 
	if( strncmp( (char*)sdinit, (char*)bufread, 15 ) ) //检测文件是否正常 返回零为正常
	{
		SD_CREAT_WRITE_PATH( "\\SD_POW\\POWER.TXT", sdinit,16 );//非零 不正常 重新创建
		SDFill( "\\SD_POW\\POWER.TXT", 16, (100 + 4 - sizeof ( sdinit )));
	}
}
/**/


//U盘检测用 不适用于SD卡
// 	while ( CH376DiskConnect( ) != USB_INT_SUCCESS ) 
// 	{
// 		delay_ms(500);
// 		printf("  False  ");
// 	}
// 	printf("  True  ");
// UINT32	CH376GetFileSize( void );  /* 读取当前文件长度 */
// 		CH376ByteLocate( UINT32 offset );	
//  	//	bufoffset = strlen( (char *) buf );
// UINT8	CH376ByteLocate( UINT32 offset );  /* 以字节为单位移动当前文件指针 */

// UINT32	CH376GetFileSize( void );  /* 读取当前文件长度 */

// UINT8	CH376GetDiskStatus( void );  /* 获取磁盘和文件系统的工作状态 */


// UINT8	CH376FileOpen( PUINT8 name );  /* 在根目录或者当前目录下打开文件或者目录(文件夹) */

// UINT8	CH376FileCreate( PUINT8 name );  /* 在根目录或者当前目录下新建文件,如果文件已经存在那么先删除 */

// UINT8	CH376DirCreate( PUINT8 name );  /* 在根目录下新建目录(文件夹)并打开,如果目录已经存在那么直接打开 */


// UINT8	CH376FileOpenPath( PUINT8 PathName )  /* 打开多级目录下的文件或者目录(文件夹),支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
// UINT8	CH376DirCreatePath( PUINT8 PathName );  /* 新建多级目录下的目录(文件夹)并打开,支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */
// UINT8	CH376FileCreatePath( PUINT8 PathName );  /* 新建多级目录下的文件,支持多级目录路径,支持路径分隔符,路径长度不超过255个字符 */


// UINT8	CH376ByteRead( PUINT8 buf, UINT16 ReqCount, PUINT16 RealCount );  /* 以字节为单位从当前位置读取数据块 */

// UINT8	CH376ByteWrite( PUINT8 buf, UINT16 ReqCount, PUINT16 RealCount );  /* 以字节为单位向当前位置写入数据块 */


